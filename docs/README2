
# Inception

*This 42 project aims to broaden our knowledge of system administration by using Docker.*

* What's Docker ?
* Container vs Virtual Machine
* Definition Image && Container
* Definition Volume Docker
* Docker commands
* Dockerfile
* Docker-compose
* LEMP Stack
* Inception's project requirements :
	- Nginx
	- MariaDB
	- Wordpress
### Documentation

[Docker Tutorial for Beginners](https://www.youtube.com/watch?v=fqMOX6JJhGo)

[Docker Tutorial for Beginners](https://www.youtube.com/watch?v=3c-iBn73dDE&t=122s)

## VM vs Container

![text](VM_vs_container.png "VM vs Container")

## Image vs Container

IMAGE:
- read-only
- a base
- like a snapshot of a container’s file system and contain both your application and its dependencies. When you run it, you recreate the container’s state
- sort of a template: cannot start or run them
- is an immutable (unchangeable) file that contains the source code, libraries, dependencies, tools, and other files needed for an application to run
- consist of a series of layers, they represent read-only files to which a container layer is added once you use it to start up a virtual environment.
- essentially govern and shape containers

CONTAINER:
- read-write
- is a running image
- is a running environment of an image
- is an instance of the Image
- Once you create a container, it adds a writable layer on top of the immutable image, meaning you can now modify it
- When you run a containerized environment, you essentially create a read-write copy of that filesystem (docker image) inside the container. This adds a container layer which allows modifications of the entire copy of the image.
- autonomous, compact, portable, lightweight
- Once the task is complete, the container exits = a contaner only lives as long as the process inside it is alive.
- a way to package application with all the necessary dependencies and configuration
- layers of images 

Images can exist without containers, whereas a container needs to run an image to exist. Therefore, containers are dependent on images and use them to construct a run-time environment and run an application.
The two concepts exist as essential components (or rather phases) in the process of running a Docker container. Having a running container is the final “phase” of that process.
## Volumes

- used for data persistence
- use to mount, create, and share volumes between containers
- used to persist data outside the container so it can be backed up or shared.
- is an independent file system entirely managed by Docker and exists as a normal file or directory on the host, where data is persisted
- When a container is started, Docker loads the read-only image layer, adds a read-write layer on top of the image stack, and mounts volumes onto the container filesystem.
- volumes are stored in a single location (most likely /var/lib/docker/volumes/ on unix systems) and greatly facilitates managing data (backup, restore, and migration).
= bind mount
- folder in physical host file system is mounted into the virtual file system of docker
- the path differs for all database
- data gets automatically replicated

3 volume types:
* Host volumes: docker run -v host_directory:container_directory
-> you decide where on the host file system the reference is made 
* Anonymous volumes: docker run -v container_directory
-> for each container a volume is generated that gets mounted (automatically generated folder: /var/lib/docker/volumes/...)
* Named volumes: docker run -v name:container_directory
-> you can reference the volume by name
-> should be used in production
## Docker commands

DOCKER COMMANDS:
- docker ps : list all running Docker containers
docker ps -a : list all containers, both running and stopped

- docker pull image_name: pull an image from a registry

- docker images: show images

- docker run = docker pulls image && starts container
-> creates a new container from an image
-> here we're working from images, takes an image as argument
use: docker run --name container_name image_name

``` http
"docker run -d -p 8080:80 nginx"
```

- docker run -d : detach-mode
-> to detach the container from the main process
It allows you to continue using the shell while your container is running on another process

- docker run -p [--publish]: allows you to bind ports from your host to the container
-> map aport 
Dans notre cas, nous lui avons demandé de transférer le trafic du port 8080 vers le port 80 du conteneur.
Ainsi, en vous rendant sur l'adresse  http://127.0.0.1:8080, vous aurez la page par défaut de Nginx.

- docker run -e ENV_NAME=name : to set environment variables

- docker build [location of your dockerfile]
docker build -t name_image [location of your dockerfile]
-> creates an image from a Dockerfile

- docker create: creates a container layer from an image

- docker start [options] container_id : starts a stopped container
(here we're working with containers and not images)

- docker stop [options] container_id 

- docker kill [option] container_id

- docker system prune : clean my system

- docker built -t name_image .
  docker run -d -p 2368:2368 name_image
		    [port_intern:port_extern]
			[host_port:container_port]

option -it = interactiv terminal

docker rm container_name
docker rmi image_name

TO DEBUG: 
- docker logs container_id (or container_name)
- docker exec -it container_id/container_name /bin/bash	-> start a shell inside the container 
## Dockerfile
[Setup VM](https://github.com/llescure/42_Inception)
## LEMP Stack

The subject ask us to create a LEMP stack with wordpress:
- L stands for Linux as the operating system
- E for Nginx (pronounced as “Engine X”) as the web server
- M for Mariadb as the database
- P for PHP as a server-side scripting language that communicates with server and database